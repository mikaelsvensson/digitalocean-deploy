---
- hosts: local
  gather_facts: false
  become: false
  tasks:
    - name: Get application source code
      git:
        repo: https://github.com/mikaelsvensson/achievements.git
        dest: ./temp/achievements
        force: yes
    - name: Download Node dependencies
      shell: npm install
      args:
          chdir: ./temp/achievements/gui-application

- hosts: local
  gather_facts: false
  become: false

  vars:
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"

  tasks:
    - name: Create Droplet from image provided by Digital Ocean.
      digital_ocean:
        state: present
        api_token: "{{ digitalocean_api_key }}"
        backups_enabled: no
        image_id: "{{ digitalocean_image_id }}"
        ipv6: no
        name: default
        private_networking: yes
        region_id: "{{ digitalocean_region }}"
        size_id: "{{ digitalocean_size_id }}"
        ssh_key_ids: "{{ digitalocean_ssh_pub_keys }}"
        wait: yes
        wait_timeout: 300
        unique_name: yes
        user_data: "{{ lookup('template', 'files/initial_server_setup.sh') }}"
      register: do_droplet

#    - debug:
#        msg: "ID is {{ do_droplet.droplet.id }}"
#
#    - debug:
#        msg: "IP is {{ do_droplet.droplet.ip_address }}"

    - name: Build the application
      shell: "mvn clean install -DapiHostName=http://{{ do_droplet.droplet.ip_address }}"
      args:
          chdir: ./temp/achievements

    # Source: https://stackoverflow.com/a/35213839
    - name: Add SSH fingerprint of new Droplet to list of known hosts
      shell: ssh-keyscan -H {{ do_droplet.droplet.ip_address }} >> {{ ssh_known_hosts_file }}

    - name: Add host for new Droplet
      add_host:
        hostname: "{{ do_droplet.droplet.ip_address }}"
        groupname: digitalocean

- hosts: digitalocean
  gather_facts: false
  remote_user: "{{ digitalocean_sudo_user }}"
  become: true
  tasks:
#    - name: Upgrade operating system to latest version. Enable automatic security updates.
    - name: Install Nginx
      include_role:
        name: nginx
    - name: Install Java
      include_role:
        name: java
    - name: Install PostgreSQL
      include_role:
        name: postgres
    - name: Upload application
      copy:
        src: ./temp/achievements/server-application/target/server-application-1.0-SNAPSHOT.jar
        dest: ./achievements-service.jar
        owner: "{{ digitalocean_sudo_user }}"
        mode: u=rw,g=r,o=r
      become: no
    - name: Upload application configuration file
      copy:
        src: ./temp/achievements/server-application/environments/heroku.yaml
        dest: ./achievements-config.yml
        owner: "{{ digitalocean_sudo_user }}"
        mode: u=rw,g=r,o=r
      become: no
    - name: Upload script for starting application
      template:
        src: ./files/start_achievements.sh
        dest: ./achievements-start.sh
        owner: "{{ digitalocean_sudo_user }}"
        mode: u=rwx,g=r,o=r
      become: no
    - name: Start service
      command: ./achievements-start.sh
      become: no
#    - name: Configure Nginx with SSL support (certificate from Let's Encrypt)
#    - name: Download appliation(s) using "git clone".
#    - name: Build application(s)
#    - name: If other Droplet exists; Copy data from it.
#    - name: Start application(s)
#    - name: Run integration tests
#    - name: Open firewall to allow http, https and ssh to the Droplet.
#    - name: Send status mail
#    - name: If other Droplet exists; Point DNS or Floting IP to new Droplet.
#    - name: If other Droplet exists; Take snapshot of old Droplet.
#    - name: If other Droplet exists; Delete old Droplet.