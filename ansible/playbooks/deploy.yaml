---
- hosts: local
  gather_facts: false
  become: false
  vars:
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
    date_slug_cmd: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    random_string_cmd: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters,digits') }}"
  tasks:
    - name: Set deploy_id
      when: deploy_id is undefined # deploy_id might have been defined using command-line argument
      set_fact:
        deploy_id: "{{ date_slug_cmd }}-{{ random_string_cmd }}"
    - debug:
        msg: "deploy_id is {{ deploy_id }}"
    - name: Build application Achievements
      when: do_build is undefined or do_build|bool
      include_role:
        name: achievements
        tasks_from: build
    - name: Get information about distributions
      uri:
        url: https://api.digitalocean.com/v2/images?page=1&per_page=1000&type=distribution
        method: GET
        headers:
          Authorization: "Bearer {{ digitalocean_api_key }}"
          Content-Type: "application/json"
      register: distributions

#    - name: Print stuff
#      debug:
#        msg: "{{ distributions }}"

    - name: Get slug of latest Ubuntu distribution
      set_fact:
        # Need to_json and from_json to avoid type checking issue. See https://github.com/ansible/ansible/issues/27299#issuecomment-331068246
        digitalocean_image_id: "{{ distributions | to_json | from_json | json_query('sort_by(json.images[?distribution==`Ubuntu` && contains(regions, `'+digitalocean_region+'`) && contains(slug, `x64`)], &slug)[-1].slug') }}"

    - debug:
        msg: "Image slug for newest Ubuntu distribution is {{ digitalocean_image_id }}"

    - name: Get information about existing Droplets
      uri:
        url: https://api.digitalocean.com/v2/droplets
        method: GET
        headers:
          Authorization: "Bearer {{ digitalocean_api_key }}"
          Content-Type: "application/json"
      register: existing_droplets

    - name: Read IP addresses of existing Droplet
      set_fact:
        deploy_id: "{{ deploy_id }}"
        old_droplet_id: "{{ existing_droplets | json_query('json.droplets[0].id') }}"
        old_droplet_ip: "{{ existing_droplets | json_query('json.droplets[0].networks.v4[?type==`private`].ip_address') | first }}"
        old_droplet_ip_public: "{{ existing_droplets | json_query('json.droplets[0].networks.v4[?type==`public`].ip_address') | first }}"
      when: existing_droplets.json.meta.total > 0

    - debug:
        msg: "Internal IP address of pre-existing Droplet (id {{ old_droplet_id }}) is {{ old_droplet_ip }} and the public is {{ old_droplet_ip_public }}"
      when: old_droplet_ip is defined

    # Source: https://stackoverflow.com/a/35213839
    - name: Add SSH fingerprint of old (pre-existing) Droplet to list of known hosts
      shell: "ssh-keyscan -H {{ old_droplet_ip_public }} >> {{ ssh_known_hosts_file }}"
      when: old_droplet_ip is defined

    - name: Add host for old Droplet
      add_host:
        hostname: "{{ old_droplet_ip_public }}"
        groupname: digitalocean_old
      when: old_droplet_ip is defined

    - name: Create Droplet from image provided by Digital Ocean.
      digital_ocean:
        state: present
        api_token: "{{ digitalocean_api_key }}"
        backups_enabled: no
        image_id: "{{ digitalocean_image_id }}"
        ipv6: no
        name: "default-{{ deploy_id }}"
        unique_name: yes
        private_networking: yes
        region_id: "{{ digitalocean_region }}"
        size_id: "{{ digitalocean_size_id }}"
        ssh_key_ids: "{{ digitalocean_ssh_pub_keys }}"
        wait: yes
        wait_timeout: 300
        user_data: "{{ lookup('template', 'files/initial_server_setup.sh') }}"
      register: do_droplet

    - name: Read id of new Droplet
      set_fact:
        new_droplet_id: "{{ do_droplet.droplet.id }}"

    # Source: https://stackoverflow.com/a/35213839
    - name: Add SSH fingerprint of new Droplet to list of known hosts
      shell: ssh-keyscan -H {{ do_droplet.droplet.ip_address }} >> {{ ssh_known_hosts_file }}

    - name: Add host for new Droplet
      add_host:
        hostname: "{{ do_droplet.droplet.ip_address }}"
        groupname: digitalocean

- hosts: digitalocean
  gather_facts: false
  remote_user: "{{ digitalocean_sudo_user }}"
  become: true
  tasks:
#    - name: Upgrade operating system to latest version. Enable automatic security updates.
    - name: Install https certificate tooling
      include_role:
        name: certbot
    - name: Install Nginx
      include_role:
        name: nginx
    - name: Install Java
      include_role:
        name: java
    - name: Install PostgreSQL
      include_role:
        name: postgres
    - name: Install Achievements server
      include_role:
        name: achievements
        tasks_from: install
    - name: Generate SSH key for user
      become: no
      command: "ssh-keygen -t rsa -f ~/.ssh/id_rsa -b 4096 -N {{ '' | quote }}"
      args:
        creates: ~/.ssh/id_rsa
    - name: The public SSH key regular user at existing Droplet
      become: no
      slurp:
        src: ~/.ssh/id_rsa.pub
      register: public_key_file
    - name: Get new SSH key
      set_fact:
        new_droplet_user_key: "{{ public_key_file['content'] | b64decode }}"
#    - debug:
#        msg: "{{ new_droplet_user_key }}"

- hosts: digitalocean_old
  gather_facts: false
  remote_user: "{{ digitalocean_sudo_user }}"
  become: false
  vars:
    new_droplet_user_key: "{{ hostvars[groups['digitalocean'][0]].new_droplet_user_key }}"
    deploy_id: "{{ hostvars[groups['local'][0]].deploy_id }}"
  tasks:
#    - debug:
#        msg: "Adding the key {{ new_droplet_user_key | quote }}"
    - name: Enable user on new Droplet to connect to the old Droplet using new user's SSH key
      shell: "echo {{ new_droplet_user_key | quote }} >> ~/.ssh/authorized_keys"
    - name: Create database backup
      command: "sudo -u postgres pg_dump -U postgres {{ app_db_name }} -F p -f /tmp/{{ app_db_name }}_redeploy_backup_{{ deploy_id }}.sql"
      become: yes

- hosts: digitalocean
  gather_facts: false
  remote_user: "{{ digitalocean_sudo_user }}"
  become: true
  vars:
    old_droplet_ip: "{{ hostvars[groups['local'][0]].old_droplet_ip | default('') }}"
    new_droplet_id: "{{ hostvars[groups['local'][0]].new_droplet_id | default('') }}"
    deploy_id: "{{ hostvars[groups['local'][0]].deploy_id }}"
  tasks:
    # Source: https://stackoverflow.com/a/35213839
    - name: Add SSH fingerprint of old (pre-existing) Droplet to list of known hosts
      become: no
      shell: "ssh-keyscan -H {{ old_droplet_ip }} >> ~/.ssh/known_hosts"
      when: old_droplet_ip != ''
    - name: If other Droplet exists; Copy data from it.
      command: "rsync --verbose --recursive --ignore-existing --perms --owner --group {{ old_droplet_ip }}:/home/{{ digitalocean_sudo_user }}/ /home/{{ digitalocean_sudo_user }}"
      become: no
      when: old_droplet_ip != ''
    - name: If other Droplet exists; Fetch database backup
      command: "scp {{ old_droplet_ip }}:/tmp/{{ app_db_name }}_redeploy_backup_{{ deploy_id }}.sql /tmp/"
      become: no
      when: old_droplet_ip != ''
    - name: If other Droplet exists; Restore database from backup
      shell: "sudo -u postgres psql {{ app_db_name }} < /tmp/{{ app_db_name }}_redeploy_backup_{{ deploy_id }}.sql"
      become: yes
      when: old_droplet_ip != ''
    - name: Start Achievements server
      include_role:
        name: achievements
        tasks_from: start
#    - name: Open firewall to allow http, https and ssh to the Droplet.
#    - name: Send status mail
#    - name: If other Droplet exists; Shutdown old Droplet.
#    - name: If other Droplet exists; Take snapshot of old Droplet.
    - name: "Assign floating IP to new Droplet"
      become: no
      digital_ocean_floating_ip:
        state: present
        ip: "{{ digitalocean_floating_ip }}"
        droplet_id: "{{ new_droplet_id }}"
        oauth_token: "{{ digitalocean_api_key }}"
    - name: "Wait for service to become available over http"
      uri:
        url: "http://{{ app_host_name }}"
        timeout: 5
    - name: "Start Certbot for Nginx"
      become: true
      script: "start_certbot.sh {{ app_host_name }}"
      retries: 3
      delay: 10
      register: start_certbot_result
      until: start_certbot_result.rc == 0
- hosts: local
  gather_facts: false
  become: false
  vars:
    new_droplet_id: "{{ hostvars[groups['local'][0]].new_droplet_id | default('') }}"
  tasks:
    - name: "Wait for service to become available over https"
      uri:
        url: "https://{{ app_host_name }}"
        timeout: 5
#    - name: Point DNS to new Droplet.
#      uri:
#        url: "http://api.dynu.com/nic/update?hostname=minamarken.dynu.net&myip={{ do_droplet.droplet.ip_address }}"
#        user: "{{ dynu_user }}"
#        password: "{{ dynu_password }}"
#        method: GET
#        force_basic_auth: yes
#        return_content: yes
#      register: dynu_updated_response
#    - debug:
#        msg: "{{ dynu_updated_response }}"
#    - name: Wait for DNS change to be propagated, e.g. by waiting for "TTL seconds" (which I believe is 90 seconds for Dynu DNS names)
    - name: If other Droplet exists; Delete old Droplet.
      when: old_droplet_ip != ''
      digital_ocean:
        state: deleted
        api_token: "{{ digitalocean_api_key }}"
        id: "{{ old_droplet_id }}"
