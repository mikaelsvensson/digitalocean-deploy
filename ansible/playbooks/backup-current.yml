---
- hosts: local
  gather_facts: false
  become: false
  vars:
    date_slug_cmd: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    random_string_cmd: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters,digits') }}"
  tasks:
    - name: Set backup_id
      when: backup_id is undefined # backup_id might have been defined using command-line argument
      set_fact:
        backup_id: "{{ date_slug_cmd }}-{{ random_string_cmd }}"
    - debug:
        msg: "backup_id is {{ backup_id }}"

    - name: Add host for old Droplet
      add_host:
        hostname: "{{ digitalocean_floating_ip }}"
        groupname: digitalocean_old

- hosts: digitalocean_old
  gather_facts: false
  remote_user: "{{ digitalocean_sudo_user }}"
  become: false
  vars:
    backup_id: "{{ hostvars[groups['local'][0]].backup_id }}"
  tasks:
#    - name: Install AWS tooling
#      include_role:
#        name: aws-tooling
#        tasks_from: install
    - name: Create database backup
      command: "sudo -u postgres pg_dumpall --username=postgres --file=/tmp/redeploy_backup_{{ backup_id }}.sql"
      become: yes
    - name: Create Let's Encrypt backup
      #      -z: filter the archive through gzip
      #      -p: extract information about file permissions (default for superuser)
      #      -c: create a new archive
      #      -v: verbosely list files
      #      -f: archive file
      command: "sudo tar -zpcvf /tmp/redeploy_backup_{{ backup_id }}_letsencrypt.tar.gz /etc/letsencrypt/"
      become: yes
    - name: Create home directory backup
      #      -z: filter the archive through gzip
      #      -p: extract information about file permissions (default for superuser)
      #      -c: create a new archive
      #      -v: verbosely list files
      #      -f: archive file
      command: "sudo tar -zpcvf /tmp/redeploy_backup_{{ backup_id }}_homedirectory.tar.gz /home/{{ digitalocean_sudo_user }}/"
      become: yes
    - name: Upload backups
      command: "sudo aws s3 cp /tmp/ s3://mikaelsvensson.info-digitalocean.deploy/backup-{{ backup_id }}/ --recursive --exclude '*' --include 'redeploy_backup_{{ backup_id }}*'"
      become: yes

